networks:
  internal:
    name: internal
    internal: true
    ipam:
      config:
        - subnet: 172.177.0.0/16

services:
  ## Secure keys
  vault-server:
    container_name: vault-server
    build: ./docker/vault
    image: springbit/vault-server
    pull_policy: never
    volumes:
      - ./data/vault/:/vault-data
    cap_add:
      - IPC_LOCK
    networks:
      - internal
    ports:
      - 8200:8200

  ## Spring profile configs
  config-service:
    container_name: config-service
    image: springbit/spring-bit-config
    pull_policy: never
    environment:
      VAULT_USER_TOKEN: ${VAULT_USER_TOKEN}
    deploy:
      resources:
        limits:
          memory: 256M
    depends_on:
      vault-server:
        condition: service_started
    networks:
      - internal
    ports:
      - 9095:9095

  ## Persistent model backend
  mysql-server:
    container_name: mysql-server
    build: ./docker/mysql
    image: springbit/mysql-server
    pull_policy: never
    networks:
      - internal
    ports:
      - 3306:3306
    volumes:
      - ./data/mysql/:/mysql-data

  ## OpenId backend
  keycloak-server:
    container_name: keycloak-server
    image: quay.io/keycloak/keycloak:26.1.0
    command: >
      start --http-enabled true
            --hostname http://localhost:8080/keycloak --hostname-admin http://localhost:9080/keycloak
            --http-relative-path /keycloak --http-port 9080
            --db mysql --db-url jdbc:mysql://mysql-server:3306/keycloak?ssl-mode=DISABLED
            --db-username keycloak-user --db-password keycloak-pass
            --verbose
    depends_on:
      - mysql-server
    ports:
      - 9080:9080
      #- 9443:8443
    networks:
      - internal
      - default

  discovery-service:
    container_name: discovery-service
    image: springbit/spring-bit-discovery
    pull_policy: never
    deploy:
      resources:
        limits:
          memory: 256M
    networks:
      - internal
    ports:
      - 8888:8888

  gateway-service:
    container_name: gateway-service
    image: springbit/spring-bit-gateway
    pull_policy: never
    environment:
      LOG_LEVEL: INFO
    deploy:
      resources:
        limits:
          memory: 256M
    depends_on:
      discovery-service:
        condition: service_started
      config-service:
        condition: service_started
      crypto-service:
        condition: service_started
    networks:
      - internal
      - default
    ports:
      - 8080:8080

  crypto-service:
    container_name: crypto-service
    image: springbit/spring-bit-crypto
    pull_policy: never
    environment:
      LOG_LEVEL: INFO
    deploy:
      resources:
        limits:
          memory: 512M
      mode: replicated
      replicas: 1
    depends_on:
      discovery-service:
        condition: service_started
      config-service:
        condition: service_started
      mysql-server:
        condition: service_started
    networks:
      - internal
    ports:
     - 8090:8090

  ml-service:
    container_name: ml-service
    image: springbit/spring-bit-ml
    pull_policy: never
    environment:
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    deploy:
      resources:
        limits:
          memory: 512M
    networks:
      - internal
      - default
    ports:
      - 8000:8000

  kafka-server:
    image: bitnami/kafka:latest
    container_name: kafka-server
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-server:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      #- KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-server:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      # Auto topics - TODO: remove me
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    volumes:
      - ./data/kafka:/bitnami/kafka
    networks:
      - internal
      - default
    ports:
      - "9092:9092"


  ## Monitoring/Logging

  tracing-server:
    container_name: tracing-server
    image: openzipkin/zipkin:3
    environment:
      ZIPKIN_UI_BASEPATH: /tracing/zipkin
    deploy:
      resources:
        limits:
          memory: 256M
    networks:
      - internal
    ports:
     - 9411:9411

  grafana-server:
    container_name: grafana-server
    build: ./docker/grafana
    image: springbit/grafana-server
    pull_policy: never
    environment:
      GF_SERVER_SERVE_FROM_SUB_PATH: true
      GF_SERVER_ROOT_URL: /grafana
    deploy:
      resources:
        limits:
          memory: 256M
    networks:
      - internal
    ports:
    - 3000:3000

  loki-server:
    container_name: loki-server
    build: ./docker/loki
    image: springbit/loki-server
    pull_policy: never
    deploy:
      resources:
        limits:
          memory: 256M
    networks:
      - internal
    ports:
      - 3100:3100

  prometheus-server:
    container_name: prometheus-server
    build: ./docker/prometheus
    image: springbit/prometheus-server
    pull_policy: never
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.route-prefix=/
      - --web.external-url=/prometheus
    deploy:
      resources:
        limits:
          memory: 256M
    networks:
      - internal
    ports:
    - 9090:9090
