spring:
  application:
    name: spring-bit-gateway

  cloud:
    gateway:
      routes:
        - id: crypto-service
          uri: ${spring-bit.services.crypto-service.url}
          enabled: ${spring-bit.services.crypto-service.enabled}
          predicates:
            - Path=/api/v1/crypto/**
          filters:
            - StripPrefix=2
        - id: crypto-service-docs
          uri: ${spring-bit.services.crypto-service.url}
          enabled: ${spring-bit.services.crypto-service.enabled}
          predicates:
            - Path=/api/v1/docs/**
          filters:
            - StripPrefix=3
            - RewriteResponseHeader=Location, ^/, /api/v1/docs/

        - id: discovery
          uri: ${spring-bit.services.discovery-service.url}
          enabled: ${spring-bit.services.discovery-service.enabled}
          predicates:
            - Path=/discovery/**
          filters:
            - StripPrefix=1
        - id: discovery-res
          uri: ${spring-bit.services.discovery-service.url}
          enabled: ${spring-bit.services.discovery-service.enabled}
          predicates:
            - Path=/eureka/**

        - id: tracing
          uri: ${spring-bit.services.tracing-server.url}
          enabled: ${spring-bit.services.tracing-server.enabled}
          predicates:
            - Path=/tracing/**
          filters:
            - StripPrefix=1
            - RewriteResponseHeader=Location, /zipkin, /tracing/zipkin

        - id: grafana
          uri: ${spring-bit.services.grafana-server.url}
          enabled: ${spring-bit.services.grafana-server.enabled}
          predicates:
            - Path=/grafana/**
          filters:
            - SetRequestHostHeader=localhost:8080

        - id: prometheus
          uri: ${spring-bit.services.prometheus-server.url}
          enabled: ${spring-bit.services.prometheus-server.enabled}
          predicates:
            - Path=/prometheus/**
          filters:
            - StripPrefix=1

        - id: keycloak
          uri: ${spring-bit.services.keycloak-server.url}
          enabled: ${spring-bit.services.keycloak-server.enabled}
          predicates:
            - Path=/keycloak/**
          filters:
            - StripPrefix=0

        - id: bitquery
          uri: ${spring-bit.services.bitquery.url}
          enabled: ${spring-bit.services.bitquery.enabled}
          predicates:
            - Path=/bitquery/**
          filters:
            - StripPrefix=1

        - id: coinmarketcap
          uri: ${spring-bit.services.coinmarketcap.url}
          enabled: ${spring-bit.services.coinmarketcap.enabled}
          predicates:
            - Path=/coinmarketcap/**
          filters:
            - StripPrefix=1

  security:
    oauth2:
      client:
        registration:
          github:
            clientId: ${spring-bit.auth.github.client-id}
            clientSecret: ${spring-bit.auth.github.client-secret}
          facebook:
            client-id: ${spring-bit.auth.facebook.client-id}
            client-secret: ${spring-bit.auth.facebook.client-secret}
          keycloak:
            client-id: springbit-openid
            client-secret: ${spring-bit.auth.keycloak.client-secret}
            authorization-grant-type: authorization_code
            redirect-uri: ${spring-bit.public-domain}/login/oauth2/code/springbit-openid
            scope: openid
            provider: keycloak

        provider:
          facebook:
            user-info-uri: https://graph.facebook.com/me?fields=id,name,picture

          keycloak:
            authorization-uri: ${spring-bit.public-domain}/keycloak/realms/springbit/protocol/openid-connect/auth
            token-uri: ${spring-bit.services.keycloak-server.url}/keycloak/realms/springbit/protocol/openid-connect/token
            user-info-uri: ${spring-bit.services.keycloak-server.url}/keycloak/realms/springbit/protocol/openid-connect/userinfo
            jwk-set-uri: ${spring-bit.services.keycloak-server.url}/keycloak/realms/springbit/protocol/openid-connect/certs
            user-name-attribute: name

---
spring:
  config:
    activate:
      on-profile: default
    # get secret keys from local disk - in production they are in vault-server
    additional-location: file:${user.dir}/scripts/config/config.properties

    discovery:
      enabled: false

management:
  prometheus:
    metrics:
      export:
        enabled: false
  tracing:
    enabled:
      false

spring-bit:
  public-domain: http://localhost:8080
  services:
    crypto-service:
      enabled: true
      url: http://localhost:8090
    discovery-service:
      enabled: true
      url: http://localhost:8888
    tracing-server:
      enabled: true
      url: http://localhost:9411
    grafana-server:
      enabled: true
      url: http://localhost:3000
    prometheus-server:
      enabled: true
      url: http://localhost:9090
    keycloak-server:
      enabled: true
      url: http://localhost:9080
    bitquery:
      enabled: false
      url: https://graphql.bitquery.io
    coinmarketcap:
      enabled: false
      url: https://pro-api.coinmarketcap.com

# Logging
logging.level.org.springframework: DEBUG
logging.level.org.springframework.cloud.gateway: DEBUG
logging.level.org.springframework.web: DEBUG
logging.level.org.springframework.http: DEBUG
logging.level.org.springframework.web.filter: DEBUG
logging.level.org.springframework.web.reactive.result: DEBUG
logging.level.org.springframework.security: DEBUG

# Config server loads spring-bit-config/src/main/resources/microservices/spring-bit-gateway-production.yml
