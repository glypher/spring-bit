# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
        
    - name: Run generation scripts
      run: |
        mkdir -p data
        cp -r k8s data/.
        # Run the cert, vault and keycloak generation
        cd scripts
        chmod u+x gen_key_stores.sh init_vault.sh init_keycloak.sh
        # Generate certificates
        ./gen_key_stores.sh
        # Install vault and set up data
        wget -O - https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
        sudo apt update && sudo apt install vault
        # Add config secrets
        echo "spring-bit.public-domain=${{secrets.SPRINGBIT_DOMAIN}}" >> config/config.properties
        echo "spring-bit.db.mysql.root.password=${{secrets.MYSQL_ROOT_PASSWORD}}" >> config/config.properties
        echo "spring-bit.db.mysql.springbit.password=${{secrets.MYSQL_SPRINGBIT_PASSWORD}}" >> config/config.properties
        echo "spring-bit.db.mysql.keycloak.password=${{secrets.MYSQL_KEYCLOAK_PASSWORD}}" >> config/config.properties
        echo "spring-bit.keycloak.admin.url=${{secrets.KEYCLOAK_ADMIN_URL}}" >> config/config.properties
        echo "spring-bit.keycloak.admin.password=${{secrets.KEYCLOAK_ADMIN_PASSWORD}}" >> config/config.properties
        echo "spring-bit.auth.github.client-id=${{secrets.SPRINGBIT_GITHUB_CLIENT_ID}}" >> config/config.properties
        echo "spring-bit.auth.github.client-secret=${{secrets.SPRINGBIT_GITHUB_CLIENT_SECRET}}" >> config/config.properties
        echo "spring-bit.auth.facebook.client-id=${{secrets.FACEBOOK_CLIENT_ID}}" >> config/config.properties
        echo "spring-bit.auth.facebook.client-secret=${{secrets.FACEBOOK_CLIENT_SECRET}}" >> config/config.properties
        echo "spring-bit.auth.keycloak.client-secret=${{secrets.KEYCLOAK_CLIENT_SECRET}}" >> config/config.properties
        echo "spring-bit.services.bitquery.api-token=${{secrets.BITQUERY_TOKEN}}" >> config/config.properties
        echo "spring-bit.services.coinmarketcap.api-token=${{secrets.COINMARKETCAP_TOKEN}}" >> config/config.properties
        echo "docker.username=${{secrets.DOCKERHUB_USERNAME}}" >> config/config.properties
        echo "docker.password=${{secrets.DOCKERHUB_PASSWORD}}" >> config/config.properties
        ./init_vault.sh
        # Initialize keycloak
        ./init_keycloak.sh
        cd ..
        sudo chown -R $USER data
      shell: bash
      
      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
    - name: Install cosign
      if: github.event_name != 'pull_request'
      uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 #v3.1.1
      with:
        cosign-release: 'v2.1.1'

    - name: Run web-app tests with npm and Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'web-app/package-lock.json'
    - run: |
        cd web-app
        npm ci
        npm run build  -- --base-href=/web-app/ --configuration=production
        npm test -- --browsers ChromeHeadless --watch=false
        cd ..
      shell: bash
        
    - name: Run tests with Maven
      run: |
        mvn --file pom.xml clean verify
  
    - name: Build docker containers with Maven
      run: |
        mvn --file pom.xml clean install
        
    - name: Build rest of docker containers
      if: github.event_name != 'pull_request'
      run: |
        docker build -t ${{secrets.DOCKERHUB_USERNAME}}/mysql-server       docker/mysql
        docker build -t ${{secrets.DOCKERHUB_USERNAME}}/vault-server       docker/vault
        docker build -t ${{secrets.DOCKERHUB_USERNAME}}/grafana-server     docker/grafana
        docker build -t ${{secrets.DOCKERHUB_USERNAME}}/loki-server        docker/loki
        docker build -t ${{secrets.DOCKERHUB_USERNAME}}/prometheus-server  docker/prometheus

    - name: login to docker hub
      if: github.event_name != 'pull_request'
      env:
        username: ${{secrets.DOCKERHUB_USERNAME}}
        password: ${{secrets.DOCKERHUB_PASSWORD}}
      run: |
        docker login -u $username -p $password
    
    - name: push the docker images
      if: github.event_name != 'pull_request'
      run: |
        docker tag springbit/spring-bit-config:latest ${{secrets.DOCKERHUB_USERNAME}}/spring-bit-config:latest
        docker push ${{secrets.DOCKERHUB_USERNAME}}/spring-bit-config:latest
        docker tag springbit/spring-bit-gateway:latest ${{secrets.DOCKERHUB_USERNAME}}/spring-bit-gateway:latest
        docker push ${{secrets.DOCKERHUB_USERNAME}}/spring-bit-gateway:latest
        docker tag springbit/spring-bit-discovery:latest ${{secrets.DOCKERHUB_USERNAME}}/spring-bit-discovery:latest
        docker push ${{secrets.DOCKERHUB_USERNAME}}/spring-bit-discovery:latest
        docker tag springbit/spring-bit-crypto:latest ${{secrets.DOCKERHUB_USERNAME}}/spring-bit-crypto:latest
        docker push ${{secrets.DOCKERHUB_USERNAME}}/spring-bit-crypto:latest
        docker tag springbit/mysql-server:latest ${{secrets.DOCKERHUB_USERNAME}}/mysql-server:latest
        docker push ${{secrets.DOCKERHUB_USERNAME}}/mysql-server:latest
        docker tag springbit/vault-server:latest ${{secrets.DOCKERHUB_USERNAME}}/vault-server:latest
        docker push ${{secrets.DOCKERHUB_USERNAME}}/vault-server:latest
        docker tag springbit/grafana-server:latest ${{secrets.DOCKERHUB_USERNAME}}/grafana-server:latest
        docker push ${{secrets.DOCKERHUB_USERNAME}}/grafana-server:latest
        docker tag springbit/loki-server:latest ${{secrets.DOCKERHUB_USERNAME}}/loki-server:latest
        docker push ${{secrets.DOCKERHUB_USERNAME}}/loki-server:latest
        docker tag springbit/prometheus-server:latest ${{secrets.DOCKERHUB_USERNAME}}/prometheus-server:latest
        docker push ${{secrets.DOCKERHUB_USERNAME}}/prometheus-server:latest

    - name: Setup AWS CLI
      if: github.event_name != 'pull_request'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
        aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        aws-region: us-east-1
    - name: Sync files to S3 bucket
      if: github.event_name != 'pull_request'
      run: |
        aws s3 sync data s3://${{secrets.AWS_S3_BUCKET}} --delete
